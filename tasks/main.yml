---
- block:
  - name: Login to oVirt engine
    ovirt_auth:
      username: "{{ engine_user | default(omit) }}"
      password: "{{ engine_password | default(omit) }}"
      url: "{{ (engine_fqdn is defined) | ternary('https://' ~engine_fqdn~ '/ovirt-engine/api', omit) }}"
      ca_file: "{{ engine_cafile | default(omit) }}"
      insecure: "{{ engine_cafile is undefined }}"
    tags:
      - always

  - name: Check if VM already exists
    ovirt_vms_facts:
      auth: "{{ ovirt_auth }}"
      pattern: "name={{ miq_vm_name }}"

  - block:
    - name: Fetch storages
      ovirt_storage_domains_facts:
        auth: "{{ ovirt_auth }}"

    - name: Find data domain
      set_fact:
        disk_storage_domain: "{{ ovirt_storage_domains | json_query(the_query) | list | first }}"
      vars:
        the_query: "[?type=='data']"
    when: vm_disk_storage is undefined

  - block:
    - name: Download the qcow image
      get_url:
        url: "{{ miq_qcow_url }}"
        dest: "{{ miq_image_path }}"
        checksum: "{{ miq_image_checksum | default(omit) }}"
      register: downloaded_file

    - name: Check file type
      command: "/usr/bin/file {{ downloaded_file.dest | quote }}"
      changed_when: false
      register: filetype

    - name: Fail if image is not qcow
      fail:
        msg: "The downloaded file is not a valid QCOW file."
      when: '"QCOW" not in filetype.stdout'

    - name: Calculate image size in GiB
      set_fact:
        miq_image_size_gib: "{{ filetype.stdout_lines[0].split()[5] | int // 2**30 }}"

    - block:
      - name: Extract integer from miq_vm_disk_size
        set_fact:
          miq_vm_disk_size_gib: "{{ miq_vm_disk_size | regex_replace('GiB$') }}"

      - name: Fail if miq_vm_disk_size is less than  qcow size
        fail:
          msg: "Setting a disk size ({{ miq_vm_disk_size }}) lower than the image size ({{ miq_image_size_gib }}GiB) may result in disk corruption."
        when: "miq_vm_disk_size_gib < miq_image_size_gib"
      when: "miq_vm_disk_size is defined"

    - name: Deploy the qcow image to oVirt engine
      ovirt_disk:
        auth: "{{ ovirt_auth }}"
        name: "{{ miq_vm_disk_name | default(miq_vm_name) }}"
        interface: "{{ miq_vm_disk_interface }}"
        size: "{{ miq_vm_disk_size | default(miq_image_size_gib + 'GiB') }}"
        format: "{{  miq_vm_disk_format }}"
        image_path: "{{ downloaded_file.dest }}"
        storage_domain: "{{ miq_vm_disk_storage | default(disk_storage_domain.name) }}"
        force: "{{ ovirt_vms | length == 0 }}"
      register: ovirt_disk

    - name: Create ManageIQ virtual machine
      ovirt_vms:
        auth: "{{ ovirt_auth }}"
        state: running
        name: "{{ miq_vm_name }}"
        cluster: "{{ miq_vm_cluster }}"
        memory: "{{ miq_vm_memory }}"
        cpu_cores: "{{ miq_vm_cpu }}"
        operating_system: "{{ miq_vm_os }}"
        type: server
        disks:
          - id: "{{ ovirt_disk.id }}"
            bootable: true
        cloud_init: "{{ miq_vm_cloud_init | default(omit) }}"
        nics: "{{ miq_vm_nics }}"
      register: create_vm

    when: ovirt_vms | length == 0

  - name: Ensure virtual machine is running
    ovirt_vms:
      auth: "{{ ovirt_auth }}"
      state: running
      name: "{{ miq_vm_name }}"

  - name: Wait for VM IP
    ovirt_vms_facts:
      auth: "{{ ovirt_auth }}"
      pattern: "name={{ miq_vm_name }}"
      fetch_nested: true
      nested_attributes: ips
    until: ovirt_vms | map(attribute='reported_devices') | list | first | length > 0
    retries: 10
    delay: 10

  - name: ManageIQ host IP address
    set_fact:
      miq_ip_addr: "{{ ovirt_vms | ovirtvmipv4 }}"

  - block:
    - include: init_cfme.yml
    - include: wait_for_api.yml

    when: "create_vm is defined and miq_initialize"

  rescue:
    - name: Remove VM if deploy fails
      ovirt_vms:
        auth: "{{ ovirt_auth }}"
        name: "{{ miq_vm_name }}"
        state: absent

  always:
    - name: Logout from oVirt engine
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
      tags:
        - always
